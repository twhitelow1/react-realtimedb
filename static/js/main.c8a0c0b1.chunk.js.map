{"version":3,"sources":["components/ContactForm.js","firebase.js","components/Contacts.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","props","useState","fullName","mobile","email","address","values","setValues","useEffect","currentId","initialFieldValues","contactObjects","handleInputChange","e","target","name","value","autoComplete","onSubmit","preventDefault","addOrEdit","className","placeholder","onChange","type","fireDb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","Contacts","setCurrentId","setContactObjects","firebaseDb","child","on","snapshot","val","class","obj","push","err","console","log","set","Object","keys","map","id","onClick","key","window","confirm","remove","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8a0c0b1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ContactForm = (props) => {\n  const initialFieldValues = {\n    fullName: '',\n    mobile: '',\n    email: '',\n    address: ''\n  }\n\n  var [values, setValues] = useState(initialFieldValues)\n\n  useEffect(() => {\n    if (props.currentId === '')\n      setValues({ ...props.initialFieldValues })\n    else\n      setValues({\n        ...props.contactObjects[props.currentId]\n      })\n  }, [props.currentId, props.contactObjects, props.initialFieldValues])\n\n\n  const handleInputChange = e => {\n    var { name, value } = e.target;\n    setValues({\n      ...values,\n      [name]: value\n    })\n  }\n\n  const handleFormSubmit = e => {\n    e.preventDefault()\n    props.addOrEdit(values);\n  }\n\n  return (\n    <form autoComplete=\"off\" onSubmit={handleFormSubmit}>\n      <div className=\"form-group input-group\">\n        <div className=\"input-group-prepend\">\n          <div className=\"input-group-text\">\n            <i className=\"fas fa-user\"></i>\n          </div>\n        </div>\n        <input className=\"form-control\" name=\"fullName\" placeholder=\"Full Name\"\n          value={values.fullName}\n          onChange={handleInputChange}\n        />\n      </div>\n      <div className=\"form-row\">\n        <div className=\"form-group input-group col-md-6\">\n          <div className=\"input-group-prepend\">\n            <div className=\"input-group-text\">\n              <i className=\"fas fa-mobile-alt\"></i>\n            </div>\n          </div>\n\n          <input className=\"form-control\" name=\"mobile\" placeholder=\"Mobile\"\n            value={values.mobile}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div className=\"form-group input-group col-md-6\">\n          <div className=\"input-group-prepend\">\n            <div className=\"input-group-text\">\n              <i className=\"fas fa-envelope\"></i>\n            </div>\n          </div>\n          <input className=\"form-control\" name=\"email\" placeholder=\"Email\"\n            value={values.email}\n            onChange={handleInputChange}\n          />\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <input className=\"form-control\" name=\"address\" placeholder=\"Address\"\n          value={values.address}\n          onChange={handleInputChange}\n        />\n      </div>\n      <div className=\"form-group\">\n        <input type=\"submit\" value={props.currentId === \"\" ? \"Save\" : \"Update\"} className=\"btn btn-primary btn-block\" />\n      </div>\n    </form>\n  );\n}\nexport default ContactForm;","import firebase from \"firebase\";\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyA4fI08LoxaT9bl4j_EjL9OKNPLKujBIBw\",\n  authDomain: \"react-firebase-e87ca.firebaseapp.com\",\n  databaseURL: \"https://react-firebase-e87ca-default-rtdb.firebaseio.com\",\n  projectId: \"react-firebase-e87ca\",\n  storageBucket: \"react-firebase-e87ca.appspot.com\",\n  messagingSenderId: \"196290404390\",\n  appId: \"1:196290404390:web:48504fe6dac45df326c6e7\"\n};\n// Initialize Firebase\nvar fireDb = firebase.initializeApp(firebaseConfig);\n\nexport default fireDb.database().ref();","import React, { useState, useEffect } from 'react';\nimport ContactForm from \"./ContactForm\";\nimport firebaseDb from \"../firebase\";\n\nconst Contacts = () => {\n\n  var [currentId, setCurrentId] = useState('');\n  var [contactObjects, setContactObjects] = useState({});\n\n  //Once components load complete\n  useEffect(() => {\n    firebaseDb.child('contacts').on('value', snapshot => {\n      if (snapshot.val() != null)\n        setContactObjects({\n          ...snapshot.val()\n        })\n      else setContactObjects({})\n    })\n  }, [])\n\n\n  const addOrEdit = obj => {\n    if (currentId === '')\n      firebaseDb.child('contacts').push(\n        obj,\n        err => {\n          if (err) console.log(err);\n          else setCurrentId('')\n        }\n      )\n    else\n      firebaseDb.child(`contacts/${currentId}`).set(\n        obj,\n        err => {\n          if (err) console.log(err)\n          else setCurrentId(' ')\n        }\n      )\n  }\n\n  const onDelete = key => {\n    if (window.confirm('Are you sure to delete this record?')) {\n      firebaseDb.child(`contacts/${key}`).remove(\n        err => {\n          if (err)\n            console.log(err)\n          else\n            setCurrentId('')\n        })\n    }\n  }\n\n  return (\n    <>\n      <div class=\"jumbotron jumbotron-fluid\">\n        <div class=\"container\">\n          <h1 class=\"display-4 text-center\">Contact Register</h1>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-5\">\n          <ContactForm {...({ addOrEdit, currentId, contactObjects })} />\n        </div>\n        <div className=\"col-md-7\">\n          <div>\n            <table className=\"table table-borderless table-stripped\">\n              <thead className=\"thead-light\">\n                <tr>\n                  <th>Full Name</th>\n                  <th>Mobile</th>\n                  <th>Email</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  Object.keys(contactObjects).map(id => {\n                    return <tr key={id}>\n                      <td>{contactObjects[id].fullName}</td>\n                      <td>{contactObjects[id].mobile}</td>\n                      <td>{contactObjects[id].email}</td>\n                      <td>\n                        <i className=\"fas fa-pencil-alt btn text-primary\" onClick={() => setCurrentId(id)}></i>\n                        <i className=\"fas fa-trash-alt btn text-danger\" onClick={() => onDelete(id)}></i>\n                      </td>\n                    </tr>\n                  })\n                }\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Contacts;","import './App.css';\nimport Contacts from './components/Contacts';\n\nfunction App() {\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-8 offset-md-2\">\n        <Contacts> </Contacts>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}